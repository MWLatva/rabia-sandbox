// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class ConsensusObj;
class ConsensusObjDefaultTypeInternal;
extern ConsensusObjDefaultTypeInternal _ConsensusObj_default_instance_;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::Command* Arena::CreateMaybeMessage<::message::Command>(Arena*);
template<> ::message::ConsensusObj* Arena::CreateMaybeMessage<::message::ConsensusObj>(Arena*);
template<> ::message::Msg* Arena::CreateMaybeMessage<::message::Msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

enum MsgType : int {
  ClientRequest = 0,
  Proposal = 1,
  State = 2,
  Vote = 3,
  ProposalRequest = 4,
  ProposalReply = 5,
  Decision = 6,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = ClientRequest;
constexpr MsgType MsgType_MAX = Decision;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Command) */ {
 public:
  inline Command() : Command(nullptr) {};
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 4,
    kCliIdFieldNumber = 1,
    kCliSeqFieldNumber = 2,
    kSvrSeqFieldNumber = 3,
  };
  // repeated string Commands = 4;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  const std::string& commands(int index) const;
  std::string* mutable_commands(int index);
  void set_commands(int index, const std::string& value);
  void set_commands(int index, std::string&& value);
  void set_commands(int index, const char* value);
  void set_commands(int index, const char* value, size_t size);
  std::string* add_commands();
  void add_commands(const std::string& value);
  void add_commands(std::string&& value);
  void add_commands(const char* value);
  void add_commands(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& commands() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_commands();
  private:
  const std::string& _internal_commands(int index) const;
  std::string* _internal_add_commands();
  public:

  // uint32 CliId = 1;
  void clear_cliid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cliid() const;
  void set_cliid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cliid() const;
  void _internal_set_cliid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CliSeq = 2;
  void clear_cliseq();
  ::PROTOBUF_NAMESPACE_ID::uint32 cliseq() const;
  void set_cliseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cliseq() const;
  void _internal_set_cliseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SvrSeq = 3;
  void clear_svrseq();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrseq() const;
  void set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrseq() const;
  void _internal_set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> commands_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cliid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cliseq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrseq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ConsensusObj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ConsensusObj) */ {
 public:
  inline ConsensusObj() : ConsensusObj(nullptr) {};
  virtual ~ConsensusObj();

  ConsensusObj(const ConsensusObj& from);
  ConsensusObj(ConsensusObj&& from) noexcept
    : ConsensusObj() {
    *this = ::std::move(from);
  }

  inline ConsensusObj& operator=(const ConsensusObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusObj& operator=(ConsensusObj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusObj* internal_default_instance() {
    return reinterpret_cast<const ConsensusObj*>(
               &_ConsensusObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConsensusObj& a, ConsensusObj& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusObj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusObj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsensusObj* New() const final {
    return CreateMaybeMessage<ConsensusObj>(nullptr);
  }

  ConsensusObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusObj& from);
  void MergeFrom(const ConsensusObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ConsensusObj";
  }
  protected:
  explicit ConsensusObj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCliIdsFieldNumber = 5,
    kCliSeqsFieldNumber = 6,
    kCommandsFieldNumber = 7,
    kProIdFieldNumber = 1,
    kProSeqFieldNumber = 2,
    kSvrSeqFieldNumber = 3,
    kIsNullFieldNumber = 4,
  };
  // repeated uint32 CliIds = 5;
  int cliids_size() const;
  private:
  int _internal_cliids_size() const;
  public:
  void clear_cliids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cliids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cliids() const;
  void _internal_add_cliids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cliids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cliids(int index) const;
  void set_cliids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cliids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cliids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cliids();

  // repeated uint32 CliSeqs = 6;
  int cliseqs_size() const;
  private:
  int _internal_cliseqs_size() const;
  public:
  void clear_cliseqs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cliseqs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cliseqs() const;
  void _internal_add_cliseqs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cliseqs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cliseqs(int index) const;
  void set_cliseqs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cliseqs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cliseqs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cliseqs();

  // repeated string Commands = 7;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  const std::string& commands(int index) const;
  std::string* mutable_commands(int index);
  void set_commands(int index, const std::string& value);
  void set_commands(int index, std::string&& value);
  void set_commands(int index, const char* value);
  void set_commands(int index, const char* value, size_t size);
  std::string* add_commands();
  void add_commands(const std::string& value);
  void add_commands(std::string&& value);
  void add_commands(const char* value);
  void add_commands(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& commands() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_commands();
  private:
  const std::string& _internal_commands(int index) const;
  std::string* _internal_add_commands();
  public:

  // uint32 ProId = 1;
  void clear_proid();
  ::PROTOBUF_NAMESPACE_ID::uint32 proid() const;
  void set_proid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proid() const;
  void _internal_set_proid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ProSeq = 2;
  void clear_proseq();
  ::PROTOBUF_NAMESPACE_ID::uint32 proseq() const;
  void set_proseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proseq() const;
  void _internal_set_proseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SvrSeq = 3;
  void clear_svrseq();
  ::PROTOBUF_NAMESPACE_ID::uint32 svrseq() const;
  void set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_svrseq() const;
  void _internal_set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool IsNull = 4;
  void clear_isnull();
  bool isnull() const;
  void set_isnull(bool value);
  private:
  bool _internal_isnull() const;
  void _internal_set_isnull(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.ConsensusObj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cliids_;
  mutable std::atomic<int> _cliids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cliseqs_;
  mutable std::atomic<int> _cliseqs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> commands_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proseq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 svrseq_;
  bool isnull_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {};
  virtual ~Msg();

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return CreateMaybeMessage<Msg>(nullptr);
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 4,
    kTypeFieldNumber = 1,
    kPhaseFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // .message.ConsensusObj Obj = 4;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::message::ConsensusObj& obj() const;
  ::message::ConsensusObj* release_obj();
  ::message::ConsensusObj* mutable_obj();
  void set_allocated_obj(::message::ConsensusObj* obj);
  private:
  const ::message::ConsensusObj& _internal_obj() const;
  ::message::ConsensusObj* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::message::ConsensusObj* obj);
  ::message::ConsensusObj* unsafe_arena_release_obj();

  // .message.MsgType Type = 1;
  void clear_type();
  ::message::MsgType type() const;
  void set_type(::message::MsgType value);
  private:
  ::message::MsgType _internal_type() const;
  void _internal_set_type(::message::MsgType value);
  public:

  // uint32 Phase = 2;
  void clear_phase();
  ::PROTOBUF_NAMESPACE_ID::uint32 phase() const;
  void set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phase() const;
  void _internal_set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::ConsensusObj* obj_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phase_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// uint32 CliId = 1;
inline void Command::clear_cliid() {
  cliid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_cliid() const {
  return cliid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::cliid() const {
  // @@protoc_insertion_point(field_get:message.Command.CliId)
  return _internal_cliid();
}
inline void Command::_internal_set_cliid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cliid_ = value;
}
inline void Command::set_cliid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cliid(value);
  // @@protoc_insertion_point(field_set:message.Command.CliId)
}

// uint32 CliSeq = 2;
inline void Command::clear_cliseq() {
  cliseq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_cliseq() const {
  return cliseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::cliseq() const {
  // @@protoc_insertion_point(field_get:message.Command.CliSeq)
  return _internal_cliseq();
}
inline void Command::_internal_set_cliseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cliseq_ = value;
}
inline void Command::set_cliseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cliseq(value);
  // @@protoc_insertion_point(field_set:message.Command.CliSeq)
}

// uint32 SvrSeq = 3;
inline void Command::clear_svrseq() {
  svrseq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_svrseq() const {
  return svrseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::svrseq() const {
  // @@protoc_insertion_point(field_get:message.Command.SvrSeq)
  return _internal_svrseq();
}
inline void Command::_internal_set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrseq_ = value;
}
inline void Command::set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrseq(value);
  // @@protoc_insertion_point(field_set:message.Command.SvrSeq)
}

// repeated string Commands = 4;
inline int Command::_internal_commands_size() const {
  return commands_.size();
}
inline int Command::commands_size() const {
  return _internal_commands_size();
}
inline void Command::clear_commands() {
  commands_.Clear();
}
inline std::string* Command::add_commands() {
  // @@protoc_insertion_point(field_add_mutable:message.Command.Commands)
  return _internal_add_commands();
}
inline const std::string& Command::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const std::string& Command::commands(int index) const {
  // @@protoc_insertion_point(field_get:message.Command.Commands)
  return _internal_commands(index);
}
inline std::string* Command::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:message.Command.Commands)
  return commands_.Mutable(index);
}
inline void Command::set_commands(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:message.Command.Commands)
  commands_.Mutable(index)->assign(value);
}
inline void Command::set_commands(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:message.Command.Commands)
  commands_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.Command.Commands)
}
inline void Command::set_commands(int index, const char* value, size_t size) {
  commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.Command.Commands)
}
inline std::string* Command::_internal_add_commands() {
  return commands_.Add();
}
inline void Command::add_commands(const std::string& value) {
  commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.Command.Commands)
}
inline void Command::add_commands(std::string&& value) {
  commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.Command.Commands)
}
inline void Command::add_commands(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.Command.Commands)
}
inline void Command::add_commands(const char* value, size_t size) {
  commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.Command.Commands)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::commands() const {
  // @@protoc_insertion_point(field_list:message.Command.Commands)
  return commands_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:message.Command.Commands)
  return &commands_;
}

// -------------------------------------------------------------------

// ConsensusObj

// uint32 ProId = 1;
inline void ConsensusObj::clear_proid() {
  proid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::_internal_proid() const {
  return proid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::proid() const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.ProId)
  return _internal_proid();
}
inline void ConsensusObj::_internal_set_proid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proid_ = value;
}
inline void ConsensusObj::set_proid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proid(value);
  // @@protoc_insertion_point(field_set:message.ConsensusObj.ProId)
}

// uint32 ProSeq = 2;
inline void ConsensusObj::clear_proseq() {
  proseq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::_internal_proseq() const {
  return proseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::proseq() const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.ProSeq)
  return _internal_proseq();
}
inline void ConsensusObj::_internal_set_proseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proseq_ = value;
}
inline void ConsensusObj::set_proseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proseq(value);
  // @@protoc_insertion_point(field_set:message.ConsensusObj.ProSeq)
}

// uint32 SvrSeq = 3;
inline void ConsensusObj::clear_svrseq() {
  svrseq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::_internal_svrseq() const {
  return svrseq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::svrseq() const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.SvrSeq)
  return _internal_svrseq();
}
inline void ConsensusObj::_internal_set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  svrseq_ = value;
}
inline void ConsensusObj::set_svrseq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_svrseq(value);
  // @@protoc_insertion_point(field_set:message.ConsensusObj.SvrSeq)
}

// bool IsNull = 4;
inline void ConsensusObj::clear_isnull() {
  isnull_ = false;
}
inline bool ConsensusObj::_internal_isnull() const {
  return isnull_;
}
inline bool ConsensusObj::isnull() const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.IsNull)
  return _internal_isnull();
}
inline void ConsensusObj::_internal_set_isnull(bool value) {
  
  isnull_ = value;
}
inline void ConsensusObj::set_isnull(bool value) {
  _internal_set_isnull(value);
  // @@protoc_insertion_point(field_set:message.ConsensusObj.IsNull)
}

// repeated uint32 CliIds = 5;
inline int ConsensusObj::_internal_cliids_size() const {
  return cliids_.size();
}
inline int ConsensusObj::cliids_size() const {
  return _internal_cliids_size();
}
inline void ConsensusObj::clear_cliids() {
  cliids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::_internal_cliids(int index) const {
  return cliids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::cliids(int index) const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.CliIds)
  return _internal_cliids(index);
}
inline void ConsensusObj::set_cliids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cliids_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.ConsensusObj.CliIds)
}
inline void ConsensusObj::_internal_add_cliids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cliids_.Add(value);
}
inline void ConsensusObj::add_cliids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cliids(value);
  // @@protoc_insertion_point(field_add:message.ConsensusObj.CliIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsensusObj::_internal_cliids() const {
  return cliids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsensusObj::cliids() const {
  // @@protoc_insertion_point(field_list:message.ConsensusObj.CliIds)
  return _internal_cliids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsensusObj::_internal_mutable_cliids() {
  return &cliids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsensusObj::mutable_cliids() {
  // @@protoc_insertion_point(field_mutable_list:message.ConsensusObj.CliIds)
  return _internal_mutable_cliids();
}

// repeated uint32 CliSeqs = 6;
inline int ConsensusObj::_internal_cliseqs_size() const {
  return cliseqs_.size();
}
inline int ConsensusObj::cliseqs_size() const {
  return _internal_cliseqs_size();
}
inline void ConsensusObj::clear_cliseqs() {
  cliseqs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::_internal_cliseqs(int index) const {
  return cliseqs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusObj::cliseqs(int index) const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.CliSeqs)
  return _internal_cliseqs(index);
}
inline void ConsensusObj::set_cliseqs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cliseqs_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.ConsensusObj.CliSeqs)
}
inline void ConsensusObj::_internal_add_cliseqs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cliseqs_.Add(value);
}
inline void ConsensusObj::add_cliseqs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cliseqs(value);
  // @@protoc_insertion_point(field_add:message.ConsensusObj.CliSeqs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsensusObj::_internal_cliseqs() const {
  return cliseqs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsensusObj::cliseqs() const {
  // @@protoc_insertion_point(field_list:message.ConsensusObj.CliSeqs)
  return _internal_cliseqs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsensusObj::_internal_mutable_cliseqs() {
  return &cliseqs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsensusObj::mutable_cliseqs() {
  // @@protoc_insertion_point(field_mutable_list:message.ConsensusObj.CliSeqs)
  return _internal_mutable_cliseqs();
}

// repeated string Commands = 7;
inline int ConsensusObj::_internal_commands_size() const {
  return commands_.size();
}
inline int ConsensusObj::commands_size() const {
  return _internal_commands_size();
}
inline void ConsensusObj::clear_commands() {
  commands_.Clear();
}
inline std::string* ConsensusObj::add_commands() {
  // @@protoc_insertion_point(field_add_mutable:message.ConsensusObj.Commands)
  return _internal_add_commands();
}
inline const std::string& ConsensusObj::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const std::string& ConsensusObj::commands(int index) const {
  // @@protoc_insertion_point(field_get:message.ConsensusObj.Commands)
  return _internal_commands(index);
}
inline std::string* ConsensusObj::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:message.ConsensusObj.Commands)
  return commands_.Mutable(index);
}
inline void ConsensusObj::set_commands(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:message.ConsensusObj.Commands)
  commands_.Mutable(index)->assign(value);
}
inline void ConsensusObj::set_commands(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:message.ConsensusObj.Commands)
  commands_.Mutable(index)->assign(std::move(value));
}
inline void ConsensusObj::set_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.ConsensusObj.Commands)
}
inline void ConsensusObj::set_commands(int index, const char* value, size_t size) {
  commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.ConsensusObj.Commands)
}
inline std::string* ConsensusObj::_internal_add_commands() {
  return commands_.Add();
}
inline void ConsensusObj::add_commands(const std::string& value) {
  commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.ConsensusObj.Commands)
}
inline void ConsensusObj::add_commands(std::string&& value) {
  commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.ConsensusObj.Commands)
}
inline void ConsensusObj::add_commands(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.ConsensusObj.Commands)
}
inline void ConsensusObj::add_commands(const char* value, size_t size) {
  commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.ConsensusObj.Commands)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsensusObj::commands() const {
  // @@protoc_insertion_point(field_list:message.ConsensusObj.Commands)
  return commands_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsensusObj::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:message.ConsensusObj.Commands)
  return &commands_;
}

// -------------------------------------------------------------------

// Msg

// .message.MsgType Type = 1;
inline void Msg::clear_type() {
  type_ = 0;
}
inline ::message::MsgType Msg::_internal_type() const {
  return static_cast< ::message::MsgType >(type_);
}
inline ::message::MsgType Msg::type() const {
  // @@protoc_insertion_point(field_get:message.Msg.Type)
  return _internal_type();
}
inline void Msg::_internal_set_type(::message::MsgType value) {
  
  type_ = value;
}
inline void Msg::set_type(::message::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.Msg.Type)
}

// uint32 Phase = 2;
inline void Msg::clear_phase() {
  phase_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg::_internal_phase() const {
  return phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg::phase() const {
  // @@protoc_insertion_point(field_get:message.Msg.Phase)
  return _internal_phase();
}
inline void Msg::_internal_set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phase_ = value;
}
inline void Msg::set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:message.Msg.Phase)
}

// uint32 Value = 3;
inline void Msg::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Msg::value() const {
  // @@protoc_insertion_point(field_get:message.Msg.Value)
  return _internal_value();
}
inline void Msg::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Msg::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.Msg.Value)
}

// .message.ConsensusObj Obj = 4;
inline bool Msg::_internal_has_obj() const {
  return this != internal_default_instance() && obj_ != nullptr;
}
inline bool Msg::has_obj() const {
  return _internal_has_obj();
}
inline void Msg::clear_obj() {
  if (GetArena() == nullptr && obj_ != nullptr) {
    delete obj_;
  }
  obj_ = nullptr;
}
inline const ::message::ConsensusObj& Msg::_internal_obj() const {
  const ::message::ConsensusObj* p = obj_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::ConsensusObj*>(
      &::message::_ConsensusObj_default_instance_);
}
inline const ::message::ConsensusObj& Msg::obj() const {
  // @@protoc_insertion_point(field_get:message.Msg.Obj)
  return _internal_obj();
}
inline void Msg::unsafe_arena_set_allocated_obj(
    ::message::ConsensusObj* obj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obj_);
  }
  obj_ = obj;
  if (obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Msg.Obj)
}
inline ::message::ConsensusObj* Msg::release_obj() {
  auto temp = unsafe_arena_release_obj();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::ConsensusObj* Msg::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_release:message.Msg.Obj)
  
  ::message::ConsensusObj* temp = obj_;
  obj_ = nullptr;
  return temp;
}
inline ::message::ConsensusObj* Msg::_internal_mutable_obj() {
  
  if (obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ConsensusObj>(GetArena());
    obj_ = p;
  }
  return obj_;
}
inline ::message::ConsensusObj* Msg::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:message.Msg.Obj)
  return _internal_mutable_obj();
}
inline void Msg::set_allocated_obj(::message::ConsensusObj* obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete obj_;
  }
  if (obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(obj);
    if (message_arena != submessage_arena) {
      obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obj, submessage_arena);
    }
    
  } else {
    
  }
  obj_ = obj;
  // @@protoc_insertion_point(field_set_allocated:message.Msg.Obj)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::MsgType>() {
  return ::message::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
